{
    "config": {
        "channels": {
            "A": {},
            "B": {},
            "type": "map",
            "values": "channel"
        },
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "loop_at_startup": {
            "default": false,
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "origin": "has-measure-trigger",
            "type": "boolean"
        },
        "make": {
            "default": "picotech",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "max_samples": {
            "default": 200,
            "doc": "Number of samples per trigger (per channel).",
            "type": "int"
        },
        "model": {
            "default": "ps2000",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "oversample": {
            "default": 16,
            "doc": "Average on board to increase vertical resolution. Int between 1 and 256. Reduces output readings per trigger and increases time_interval in proportion.",
            "type": "int"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "shots_processing_path": {
            "doc": "Path to a .py module that processes raw scope traces into output channels. Example module is included in examples directory (`processing_module.py`). Path can be absolute or relative to the config file. ",
            "type": "string"
        },
        "timebase": {
            "default": 5,
            "doc": "Time step between measurements is `10 ns * 2^(time_base)`.",
            "type": "int"
        },
        "trigger_channel": {
            "doc": "trigger channel id (A, B, C, or D)",
            "type": "string"
        },
        "trigger_delay": {
            "default": -15,
            "doc": "Delay, as a percentage of sampled data points, between trigger and start block (delay in [-100, 100]). 0 means trigger event is first data point, -50 means trigger event is in the middle of block.",
            "type": "int"
        },
        "trigger_rising": {
            "default": true,
            "doc": "Trigger on rising (true) or falling (false) edge",
            "type": "boolean"
        },
        "trigger_self": {
            "default": false,
            "doc": "Sets whether (True) or not (False) ADC is triggered by its own AWG. AWG generates 0-1 V square wave at 1 kHz. Connect AWG to trigger.physical_channel.",
            "type": "boolean"
        },
        "trigger_threshold": {
            "default": 500000,
            "doc": "Voltage value (in uV) that triggers sampling.",
            "type": "int"
        }
    },
    "doc": "Triggered Picotech Oscilloscope",
    "hardware": [
        "picotech:ps2000"
    ],
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-picotech"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-picotech/-/issues",
        "linux_c_libraries": "https://www.picotech.com/downloads/linux",
        "source": "https://gitlab.com/yaq/yaqd-picotech",
        "windows_c_libraries": "https://www.picotech.com/downloads"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_channel_mappings": {
            "doc": "Defines which mapping keys apply to which channel keys. Each channel may have zero or many mappings. Mappings must broadcast into corresponding channels.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "string",
                    "type": "array"
                }
            }
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_mapping_id": {
            "doc": "Mapping ID. This integer increments every time the mapping is updated. Clients can safely check this id to verify that their cached mappings are correct, if desired.",
            "origin": "has-mapping",
            "request": [],
            "response": "int"
        },
        "get_mapping_units": {
            "doc": "Must return units for every mapping. Units can be null.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_mappings": {
            "doc": "Mappings themselves.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "ndarray",
                    "double"
                ]
            }
        },
        "get_measured": {
            "doc": "Returns map of channel_name to measured_value. Always returns additional key measurement_id.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "int",
                    "double",
                    "ndarray"
                ]
            }
        },
        "get_measured_samples": {
            "doc": "Get full raw channel data. Returns array of shape (channel, sample, shot).",
            "request": [],
            "response": "ndarray"
        },
        "get_measurement_id": {
            "doc": "Get current measurement_id. Clients are encouraged to watch for this to be updated before calling get_measured to get entire measurement.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "int"
            }
        },
        "get_nshots": {
            "doc": "Get the currently planned number of shots.",
            "request": [],
            "response": "int"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "origin": "has-measure-trigger",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "set_awg": {
            "doc": "Set square wave frequency of the AWG.  Only available if trigger_self=False.",
            "request": [
                {
                    "name": "frequency",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_nshots": {
            "doc": "Set the number of shots to acquire.",
            "request": [
                {
                    "name": "nshots",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "origin": "has-measure-trigger",
            "request": [],
            "response": "null"
        }
    },
    "protocol": "picotech-adc-triggered",
    "requires": [],
    "state": {
        "nshots": {
            "default": 50,
            "type": "int"
        }
    },
    "traits": [
        "has-mapping",
        "has-measure-trigger",
        "is-daemon",
        "is-sensor"
    ],
    "types": [
        {
            "name": "processing_method",
            "symbols": [
                "average",
                "sum",
                "min",
                "max"
            ],
            "type": "enum"
        },
        {
            "name": "adc_range",
            "symbols": [
                "_20_mV",
                "_50_mV",
                "_100_mV",
                "_200_mV",
                "_500_mV",
                "_1_V",
                "_2_V",
                "_5_V",
                "_10_V",
                "_20_V"
            ],
            "type": "enum"
        },
        {
            "name": "adc_coupling",
            "symbols": [
                "DC",
                "AC"
            ],
            "type": "enum"
        },
        {
            "fields": [
                {
                    "default": false,
                    "name": "enabled",
                    "type": "boolean"
                },
                {
                    "default": "DC",
                    "name": "coupling",
                    "type": "adc_coupling"
                },
                {
                    "default": "5 V",
                    "name": "range",
                    "type": "adc_range"
                },
                {
                    "default": false,
                    "name": "invert",
                    "type": "boolean"
                }
            ],
            "name": "channel",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}